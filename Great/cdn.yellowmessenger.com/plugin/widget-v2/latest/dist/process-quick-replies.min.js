"use strict";
(self.webpackChunkweb_plugin = self.webpackChunkweb_plugin || []).push([
    [8745], {
        5823: (e, t, i) => {
            i.d(t, {
                Qe: () => d,
                Qj: () => c,
                Z5: () => s,
                bw: () => l,
                mA: () => r
            });
            var n = i(855),
                a = i(7563),
                o = i(9755),
                s = function(e) {
                    e.imageAsAction.url ? (e.imageAsAction.postback && window.chat.send(e.imageAsAction.postback), window.chat.xmppSend({
                        messageType: "#analytics",
                        analyticsData: e.imageAsAction.analytics,
                        interactionType: "cards",
                        buttonClick: !0
                    }), window.open(e.imageAsAction.url, "_blank")) : e.actions && e.actions.length > 0 && (e.actions[0].text ? window.chat.send({
                        message: e.actions[0].text,
                        analyticsData: e.actions[0].analytics,
                        interactionType: "cards",
                        buttonClick: !0
                    }, null, e.actions[0].title) : (window.chat.xmppSend({
                        messageType: "#analytics",
                        analyticsData: e.actions[0].analytics,
                        interactionType: "cards",
                        buttonClick: !0
                    }), window.open(e.actions[0].url, "_blank")))
                },
                l = function(e) {
                    var t = e.action,
                        i = e.botNameDynamic,
                        o = e.skin,
                        s = e.data_count || 0,
                        l = e.titleHeader,
                        c = e.isPaymentReceiptSubmitButton;
                    !t.text && !t.title || t.url ? (t.postback && window.chat.send(t.postback, null, t.title), window.chat.xmppSend({
                        messageType: "#analytics",
                        analyticsData: t.analytics,
                        interactionType: "cards",
                        buttonClick: !0
                    }), window.open(t.url, "_blank"), (0, a.u8)("Card Button Click", t.title, 1, n.oH, i, o)) : window.chat.send({
                        message: c ? l : 0 !== s ? "".concat(t.text || t.title, ":").concat(s) : t.text || t.title,
                        analyticsData: t.analytics,
                        interactionType: "cards",
                        triggerJourney: t.triggerJourney,
                        buttonClick: !0
                    }, null, c ? l : t.title)
                },
                c = {
                    getOrderStatusClass: function(e, t, i) {
                        var n = e.findIndex((function(e) {
                                return e === t
                            })),
                            a = e.findIndex((function(e) {
                                return e === i
                            }));
                        return n < a ? "tracker_status_active" : n === a ? "tracker_status_active tracker_status_current" : "tracker_status_inactive"
                    },
                    getTrackProgressClasses: function(e, t, i) {
                        if (t !== i) return "";
                        var n = e.findIndex((function(e) {
                            return e === i
                        }));
                        return 0 === n ? "tracker_status_zero_progress" : n === e.length - 1 ? "" : "tracker_status_some_progress"
                    }
                },
                d = function(e, t) {
                    try {
                        var i = e.attr("class"),
                            n = parseInt(e[0].value) || 0;
                        return n <= 0 && (n = 0), n > t && (n -= 1), o(".".concat(i.replace(/ /g, "."))).val(n), n
                    } catch (e) {
                        return
                    }
                },
                r = function(e, t) {
                    try {
                        var i = e.attr("class"),
                            n = parseInt(e[0].value) || 0;
                        return n < 0 && (n = 0), n < t && (n += 1), o(".".concat(i.replace(/ /g, "."))).val(n), n
                    } catch (e) {
                        return
                    }
                }
        },
        8661: (e, t, i) => {
            i.r(t), i.d(t, {
                processQuickReplies: () => y
            });
            var n = i(9066),
                a = i(9348),
                o = i(855),
                s = i(413),
                l = i(9497),
                c = i(4596),
                d = i(3716),
                r = i(3077),
                u = i(1543),
                p = i(6894),
                v = i(5823),
                h = i(7754),
                m = i(4082),
                g = i(7993),
                w = i(7563),
                k = i(4199),
                b = i(9755);

            function y(e) {
                var t, i, y, f, C, R = e.parsedMessage,
                    x = e.skin,
                    _ = e.timestamp,
                    q = e.isOlderMessage,
                    T = e.targetLanguage,
                    E = e.botNameDynamic,
                    O = e.lastBotQRMessage,
                    S = b("div.chat-message"),
                    Q = (0, p.zs)(5),
                    D = b('<div role="group" aria-label="bot replied" aria-live="assertive" class="chat-message message-came quick-reply from-them bot-message new"></div>'),
                    I = "menu" === (null === (t = self.skin) || void 0 === t || null === (t = t.navigation) || void 0 === t ? void 0 : t.type);
                if (S.length > 0 && b(S[S.length - 1]).hasClass("from-them") && !b(S[S.length - 1]).hasClass("carousel") || D.addClass("first"), D.append('<span role="img" aria-label="from '.concat(null === (i = window.chat) || void 0 === i ? void 0 : i.botName, '" class="from-icon"/>')), R.quickReplies.title && "" !== R.quickReplies.title.trim() && !R.quickReplies.hideText && (D.append(b('<div id="qr-title-'.concat(Q, '" class="').concat(null !== (y = window.chat) && void 0 !== y && null !== (y = y.skin) && void 0 !== y && y.markdownEnabled ? "markdown-div" : "", '">').concat((0, k.Oy)(R.quickReplies.title), "</div>"))), (0, k.OM)({
                        node: D,
                        timestamp: _,
                        isOlderMessage: q,
                        targetLanguage: T,
                        isWelcomeMessage: !1,
                        messageType: "quick reply title",
                        showFeedbackOptions: R.enableMessageFeedback || (null === (f = R.quickReplies) || void 0 === f ? void 0 : f.enableFeedback) || (null === (C = window.chat) || void 0 === C || null === (C = C.skin) || void 0 === C ? void 0 : C.enableMessageFeedback)
                    })), !(q && O && JSON.stringify(R.quickReplies) !== JSON.stringify(O) || q && -1 === O)) {
                    if (null != R && R.journeySlug && "default" === R.journeySlug && R.quickReplies.options && R.quickReplies.options.length > 0 && "card" === (null == x ? void 0 : x.didYouMeanType)) {
                        var L = b('<div\n       style=\'display:flex !important\'\n       role="group" aria-label="bot replied"\n       class="chat-message message-came card-ele carousel new bot-message single-card">\n        <span class=\'from-icon\' style="bottom: 0;"></span>\n      </div>'),
                            M = b("<ul aria-label='List Options' class='collapse-container single'></ul>"),
                            A = b('<li class= "collapse single"></li>'),
                            B = b('<div class="collapse-title"></div>');
                        B.append('<div class="title">Did you mean</div>'), B.append('<div class="plusIcon plusIcon_'.concat(Q, '"><i aria-hidden="true" class="ri-subtract-line"></i></div>')), A.append(B);
                        var P = b('<div class="collapse-body '.concat(Q, '" style="display:block;"></div>'));
                        return b(R.quickReplies.options).each((function(e, t) {
                            var i = b('<li class="box"><button data-testid="ym-list-card-1-'.concat(e, '" class="text">').concat(t.title || t.text, "</button></li>"));
                            P.append(i);
                            var n = {
                                action: t,
                                botNameDynamic: E,
                                skin: x
                            };
                            i.on("click", (function() {
                                return (0, v.bw)(n)
                            }))
                        })), A.append(P), B.on("click", (function() {
                            b(".plusIcon_".concat(Q, " i")).hasClass("ri-add-line") ? (A.removeClass("closed"), b(".plusIcon i").removeClass("ri-subtract-line"), b(".plusIcon i").addClass("ri-add-line"), b(".collapse-body").css("display", "none"), b(".plusIcon_".concat(Q, " i")).removeClass("ri-add-line"), b(".plusIcon_".concat(Q, " i")).addClass("ri-subtract-line"), b(".".concat(Q)).css("display", "block")) : (A.addClass("closed"), b(".plusIcon_".concat(Q, " i")).removeClass("ri-subtract-line"), b(".plusIcon_".concat(Q, " i")).addClass("ri-add-line"), b(".".concat(Q)).css("display", "none"))
                        })), M.append(A), L.append(M), void(0, k.OM)({
                            node: L,
                            timestamp: _,
                            isOlderMessage: q,
                            targetLanguage: T,
                            isWelcomeMessage: !1,
                            messageType: "quick reply options"
                        })
                    }
                    if (!0 === window.ymConfig.debug ? R.inlineQuickReplies = !1 : R.inlineQuickReplies = !(0, d.A)(a.P.oldQR), window.ymConfig.transparency || R.quickReplies.multiSelect || R.inlineQuickReplies) {
                        var H, F, N, J;
                        if (R.quickReplies.multiSelect && (b(".send-input-form").hasClass("hide") || (b(".send-input-form").addClass("hide"), b(".send-input").addClass("hide")), R.inlineQuickReplies && (b(".send-input-form").hasClass("hide") || (b(".send-input-form").removeClass("hide"), b(".send-input").removeClass("hide")))), window.chat.hideOptions(!0), R.quickReplies.options && R.quickReplies.options.length > 0) {
                            var j = b('<div class="card-ele"> </div>'),
                                z = R.quickReplies.multiSelect,
                                G = b("#chatOptions");
                            G.attr("role", "group"), G.attr("aria-label", R.quickReplies.title || "Quick Replies"), b(R.quickReplies.options).each((function(e, t) {
                                var i;
                                if (t) {
                                    var a = b('<button data-testid="'.concat(z ? "ym-multiSelect" : "ym-quick-reply", "-").concat(e + 1, '" ').concat(z ? 'role="checkbox"' : "", " ").concat(z ? 'aria-checked="false"' : "", ' aria-label="').concat(t.title, "\" style='").concat(R.quickReplies.rating ? 10 === R.quickReplies.options.length ? "width: 9%" : "width: 50px; height: 30px;" : "", "' class='").concat(R.quickReplies.rating ? "rating " + (t.ratingType ? t.ratingType : "") : "option", " ").concat(t.primary ? "primary" : "", "' ").concat(t.location && !navigator.geolocation ? "title='Location is not supported on your browser' disabled=disabled" : "", ">").concat(t.image ? "<img aria-hidden='true' alt='image in quick reply ".concat(e + 1, "' src='").concat(t.image, "'/>") : "").concat(t.location ? '<i class="fa fa-crosshairs" aria-hidden="true"></i> &nbsp;&nbsp;' : "").concat(t.notification ? '<i class="fa fa-bell" aria-hidden="true"></i> &nbsp;&nbsp;' : "").concat(z ? '<span class="checkmark"></span>' : "", "<div>").concat(t.title, "</div></button>"));
                                    if (t.upload && (a.html(""), a.append('<div>    <i class="fa fa-paperclip attach"/> ' + t.title + '   <form id="uploadForm" action="' + window.ymConfig.host + "/api/chat/upload?bot=" + window.ymConfig.bot + "&uid=" + (0, w.sq)() + window.ymConfig.ymAuthenticationToken ? "&ymAuthenticationToken=" + window.ymConfig.ymAuthenticationToken : 0), window.ymConfig.bot, a.on("change", "#uploadFile", (function(e) {
                                            window.chat.handleUpload(e, "uploadForm")
                                        }))), t.sendSelectedEvent && (b(".timestamp-bot:last").addClass("hidden"), (0, p.Og)()), a.children().hover((function(e) {
                                            var t = b(e.target).css("color");
                                            !b(e.target).closest("button").hasClass("selected") && b(e.target).children().hasClass("checkmark") && b(e.target).children().css("border", "2px solid ".concat(t))
                                        })), a.on("click", (function(e) {
                                            try {
                                                (0, p.Qk)("quick_reply", t)
                                            } catch (e) {
                                                (0, h.vU)("Error in emitEvent", e)
                                            }
                                            if (l.c.setTimestamp(n.or.QR_SELECTED), setTimeout((function() {
                                                    var e, i;
                                                    l.c.pushEvent(n.or.QR_SELECTED, {
                                                        payload: {
                                                            options: null !== (e = null === (i = R.quickReplies.options) || void 0 === i ? void 0 : i.length) && void 0 !== e ? e : 0,
                                                            selected: 1,
                                                            upload: t.upload,
                                                            send_event: t.sendSelectedEvent,
                                                            url: t.url,
                                                            location: t.location,
                                                            notification: t.notification,
                                                            journey: !(t.upload || t.sendSelectedEvent || t.url || t.location || t.notification)
                                                        }
                                                    }, [n.or.QR_LOADED, n.or.QR_SELECTED])
                                                }), 0), t.doNotSend) return (0, m.n2)(), void window.chat.send(t.title, null, null, !0);
                                            if (!t.upload) {
                                                if (t.sendSelectedEvent) {
                                                    var i = [];
                                                    b(".premium_grid_item .item-value.active.added-in-cart").each((function() {
                                                        i.push(this.innerText)
                                                    })), b(".premium_grid_item .item-value").removeClass("active"), b(".premium_grid_item .click-button").addClass("hide"), window.chat.send({
                                                        event: {
                                                            code: t.sendSelectedEvent,
                                                            payload: i,
                                                            textData: t.text || t.title
                                                        }
                                                    }, !0)
                                                }
                                                if (b(e.target).closest("button").hasClass("selected")) {
                                                    b(e.target).closest("button").removeClass("selected").attr("aria-checked", "false");
                                                    var a = b(e.target).css("color") || b(e.target).closest("button").css("color");
                                                    if (b(e.target).hasClass("checkmark") ? b(e.target).css("border", "2px solid ".concat(a)) : b(e.target).closest("button").children().css("border", "2px solid ".concat(a)), window.chat.selectedOptions = window.chat.selectedOptions.filter((function(e) {
                                                            return !(e.title == t.title && e.text === t.text)
                                                        })), b("#ymMsgInput").val(window.chat.getSelectedOptionsTitle()), b(".selectOptions").length) {
                                                        var d = b(".selectOptions .text");
                                                        d.attr("data-i18n-text", "text.selectedItems"), d.attr("data-i18n-selectedItems", window.chat.selectedOptions.length), d.text((0, c.t)("text.selectedItems", {
                                                            selectedItems: window.chat.selectedOptions.length
                                                        }))
                                                    }
                                                } else {
                                                    if (t.url) window.chat.xmppSend({
                                                        messageType: "#analytics",
                                                        analyticsData: t.analytics,
                                                        interactionType: "quick-replies",
                                                        buttonClick: !0
                                                    }), setTimeout((function() {
                                                        window.parent.open(t.url, t.selfReload ? "_self" : "_blank")
                                                    }), 0);
                                                    else if (t.location) navigator.geolocation ? navigator.geolocation.getCurrentPosition((function(e) {
                                                        return window.chat.sendLocation(e, t.text || t.title)
                                                    }), (function() {
                                                        window.chat.send({
                                                            event: {
                                                                code: "blocked-location",
                                                                value: !0
                                                            }
                                                        }, !0), (0, r.A)({
                                                            text: (0, c.t)("error.locationServiceDisabled"),
                                                            status: "error"
                                                        })
                                                    })) : (window.chat.send({
                                                        event: {
                                                            code: "blocked-location",
                                                            value: !0
                                                        }
                                                    }, !0), (0, r.A)({
                                                        text: (0, c.t)("error.locationServiceDisabled"),
                                                        status: "error"
                                                    }));
                                                    else if (t.notification) window.chat.sendAskNotificationMessage();
                                                    else if (t.locationPicker) b(".location-selector").show(), (0, p.k3)();
                                                    else if (t.post_form) {
                                                        var u = b('<form method="post" action="' + t.post_form.url + '" target="_blank"></form>');
                                                        for (var v in t.post_form.data) t.post_form.data[v] && u.append("<input type='hidden' name='" + v + "' value='" + t.post_form.data[v] + "'/>");
                                                        u.appendTo("body").submit()
                                                    } else if (R.quickReplies.multiSelect) {
                                                        if (b(e.target).closest("button").addClass("selected").attr("aria-checked", "true"), b(e.target).hasClass("checkmark") ? b(e.target).css("border", "none") : b(e.target).children().css("border", "none"), window.chat.selectedOptions.push(t), 0 === b(".selectOptions").length) {
                                                            var k, y, f = b('\n              <div class=\'selectOptions\'>\n                <div class="text" role="alert" aria-live="assertive" data-i18n-text="text.selectedItems data-i18n-selectedItems="'.concat(window.chat.selectedOptions.length, '">').concat((0, c.t)("text.selectedItems", {
                                                                selectedItems: window.chat.selectedOptions.length
                                                            }), "</div>\n                <div class='buttons'>\n                  <button data-testid=\"ym-mutilselect-deselect\" id='deselect-multi-select' tabindex=\"0\" class='deselect'>").concat(R.quickReplies.deselectButtonText || (0, c.t)("action.deselect"), "</button>\n                  <button data-testid=\"ym-multiselect-submit\" id='send-multi-select' tabindex=\"0\" class='submit'>").concat(R.quickReplies.submitButtonText || (0, c.t)("action.submit"), "</button>\n                </div>\n              </div>"));
                                                            b("#chatContainer").append(f), (null !== (k = window.ymConfig) && void 0 !== k && k.containerTheme || "dark" === (null === (y = window.chat) || void 0 === y || null === (y = y.mapping) || void 0 === y || null === (y = y.skin) || void 0 === y ? void 0 : y.containerTheme)) && b(".selectOptions").css("background", "".concat(s.C6.dark.cardBackgroundColor));
                                                            var C = b("#send-multi-select").css("background-color"),
                                                                _ = (0, w.aG)(C),
                                                                q = (0, w.g6)(_, -.3);
                                                            document.body.style.setProperty("--sendMultiSelectButtonHoverColor", q), window.chatBoxMainContainerLength += b(".selectOptions")[0].clientHeight, (0, p.Og)(), b("#deselect-multi-select").on("click", g.Q9), b("#send-multi-select").on("click", (function() {
                                                                var e, t, i;
                                                                (0, g.dy)(), l.c.setTimestamp(n.or.QR_SELECTED), l.c.pushEvent(n.or.QR_SELECTED, {
                                                                    payload: {
                                                                        options: null !== (e = null === (t = R.quickReplies.options) || void 0 === t ? void 0 : t.length) && void 0 !== e ? e : 0,
                                                                        selected: null === (i = window.chat) || void 0 === i || null === (i = i.selectedOptions) || void 0 === i ? void 0 : i.length,
                                                                        multi_select: !0
                                                                    }
                                                                }, [n.or.QR_LOADED, n.or.QR_SELECTED])
                                                            }))
                                                        } else {
                                                            var T = b(".selectOptions .text");
                                                            T.attr("data-i18n-text", "text.selectedItems"), T.attr("data-i18n-selectedItems", window.chat.selectedOptions.length), T.text((0, c.t)("text.selectedItems", {
                                                                selectedItems: window.chat.selectedOptions.length
                                                            }))
                                                        }
                                                        b("#ymMsgInput").val(window.chat.getSelectedOptionsTitle())
                                                    } else(0, w.u8)("Quick Reply", t.text || t.title, 1, o.oH, E, x), window.chat.send({
                                                        message: t.text || t.title,
                                                        analyticsData: t.analytics,
                                                        interactionType: "quick-replies",
                                                        triggerJourney: t.triggerJourney,
                                                        buttonClick: !0
                                                    }, null, t.title);
                                                    t.url && t.postback && window.chat.send(t.postback, null, t.title)
                                                }
                                            }
                                        })), R.quickReplies.persistentOptions ? j.append(a) : G.append(a), !1 !== (null === (i = window.chat) || void 0 === i || null === (i = i.skin) || void 0 === i ? void 0 : i.scrollToBottomAlways) && setTimeout((function() {
                                            (0, p.Lp)()
                                        }), 600), t.buttonCss) {
                                        t.buttonCss.standard = t.buttonCss.standard || {}, t.buttonCss.hover = t.buttonCss.hover || {};
                                        var d = {},
                                            u = {};
                                        b.each(t.buttonCss.standard, (function(e, t) {
                                            d[e] = t.value ? t.value : t
                                        })), b.each(t.buttonCss.hover, (function(e, t) {
                                            u[e] = t.value ? t.value : t
                                        })), a.css(d), a.hover((function() {
                                            a.css(u)
                                        }), (function() {
                                            a.css(d)
                                        }))
                                    }
                                }
                            })), R.quickReplies.rating && !R.quickReplies.noRatingLabels && G.append('<div style="\n    padding-bottom: 15px;\n    color: #666;\n    font-size: 10px;\n    font-weight: bold;\n    padding-top: 5px;\n    display: -webkit-box;\n"><span style="\n    width: 58%;\n    display: flex;\n    text-align: center;\n">|<hr style="width: 45%"> Poor <hr  style="width: 45%">|</span><span style="\n    width: 20%;\n    display: flex;\n    text-align: center;\n">|<hr style="width: 40%">Average<hr style="width: 40%">|</span><span style="\n    width: 18%;\n    display: flex;\n    text-align: center;\n">|<hr style="width: 40%"> Good <hr  style="width: 40%">|</span></div>'), R.quickReplies.persistentOptions || (q ? G.removeClass("hide") : (0, u.g)(G)), R.quickReplies.persistentOptions && (0, k.OM)({
                                node: j,
                                isOlderMessage: q,
                                targetLanguage: T
                            })
                        }
                        null !== (H = R.quickReplies) && void 0 !== H && H.multiSelect && ((null !== (F = window.ymConfig) && void 0 !== F && F.containerTheme || "dark" !== (null === (N = window.chat) || void 0 === N || null === (N = N.mapping) || void 0 === N || null === (N = N.skin) || void 0 === N ? void 0 : N.containerTheme)) && b("#chatBoxMainContainer button.option").css("border", "1px solid ".concat(s.C6.light.borderColor)), b("#chatBoxMainContainer button.option").css("paddingLeft", 40)), R.hideInput && R.inlineQuickReplies && (!0 === R.hideHomeButton ? (0, m.PL)() : (b(".home-button-component").removeClass("hide"), b(".new-home-button").addClass("hideInput"), b(".event-buttons").addClass("hide"), b(".home-button-component").addClass("hide-input-bar"), b(".chat-form").addClass("hide"), b(".home-button-text-content").text("".concat((null === (J = window.chat) || void 0 === J || null === (J = J.skin) || void 0 === J ? void 0 : J.homeButtonCustomText) || (I ? (0, c.t)("text.menu") : (0, c.t)("text.home")))), b(".home-button-text-content").removeClass("hide"), b("#ymFramebranding").hide()));
                        var U, W, Y, X, Z, K, V, $ = b("#chatBoxMainContainer button.option"),
                            ee = b("#chatOptions");
                        if (null != x && x.verticalQuickReplies) $.addClass("vertical-qr"), "left" === (null == x || null === (U = x.advanceSettings) || void 0 === U || null === (U = U.quickReplies) || void 0 === U ? void 0 : U.buttonPosition) ? $.addClass("vertical-qr-left") : "center" === (null == x || null === (W = x.advanceSettings) || void 0 === W || null === (W = W.quickReplies) || void 0 === W ? void 0 : W.buttonPosition) ? $.addClass("vertical-qr-center") : $.addClass("vertical-qr-right");
                        else if (R.inlineQuickReplies) {
                            var te, ie;
                            $.addClass("inlineQR"), ee.addClass("inline-QR"), "left" === (null == x || null === (te = x.advanceSettings) || void 0 === te || null === (te = te.quickReplies) || void 0 === te ? void 0 : te.buttonPosition) ? ee.addClass("advance-settings-left") : "center" === (null == x || null === (ie = x.advanceSettings) || void 0 === ie || null === (ie = ie.quickReplies) || void 0 === ie ? void 0 : ie.buttonPosition) && ee.addClass("advance-settings-center")
                        }(!q || q && window.lastMessageQR) && (l.c.setTimestamp(n.or.QR_LOADED), l.c.pushEvent(n.or.QR_LOADED, {
                            payload: {
                                options: null !== (Y = null === (X = R.quickReplies.options) || void 0 === X ? void 0 : X.length) && void 0 !== Y ? Y : 0,
                                avg_characters: Math.floor((null === (Z = R.quickReplies.options) || void 0 === Z ? void 0 : Z.reduce((function(e, t) {
                                    return e + t.title.length
                                }), 0)) / (null !== (K = null === (V = R.quickReplies.options) || void 0 === V ? void 0 : V.length) && void 0 !== K ? K : 1)),
                                multi_select: !!R.quickReplies.multiSelect,
                                inline_qr: !0,
                                hide_input: !!R.hideInput
                            }
                        }))
                    } else if (R.quickReplies.options && R.quickReplies.options.length > 0) {
                        var ne, ae, oe, se, le, ce = (0, p.zs)(5),
                            de = b('<div class="quick-reply2 '.concat(ce, '"> </div>')),
                            re = b('<div class="option"></div>');
                        b.each(R.quickReplies.options, (function(e, t) {
                            var i = b('<button style="border: none;" tabindex="0" class="box"></button>');
                            t.image && i.append("<img src=".concat(t.image, "></img>")), t.title && i.append('<div class="text">'.concat(t.title, "</div>")), i.on("click", (function() {
                                var e, i;
                                (0, g.CX)(t), l.c.setTimestamp(n.or.QR_SELECTED), l.c.pushEvent(n.or.QR_SELECTED, {
                                    payload: {
                                        options: null !== (e = null === (i = R.quickReplies.options) || void 0 === i ? void 0 : i.length) && void 0 !== e ? e : 0,
                                        selected: 1
                                    }
                                }, [n.or.QR_LOADED, n.or.QR_SELECTED])
                            })), re.append(i)
                        })), de.append(re), de.insertBefore(".send-input").ready((function() {
                            var e, t;
                            ((0, g.EI)(), R.hideInput) && (R.hideHomeButton ? (b(".quick-reply2.".concat(ce)).css("bottom", 0), (0, m.PL)()) : (b(".new-home-button").addClass("hideInput"), b(".event-buttons").addClass("hide"), b(".home-button-component").addClass("hide-input-bar"), b(".chat-form").addClass("hide"), b(".home-button-text-content").text("".concat((null === (t = window.chat) || void 0 === t || null === (t = t.skin) || void 0 === t ? void 0 : t.homeButtonCustomText) || (I ? (0, c.t)("text.menu") : (0, c.t)("text.home")))), b(".home-button-text-content").removeClass("hide"), b("#ymFramebranding").hide()), b("#ymMsgInput").trigger("blur"));
                            window.YMQRString.push(ce);
                            var i, n, a, o, s = b(".quick-reply2.".concat(ce));
                            window.ymConfig.ads || window.botInOpenState || window.ymConfig.pwa ? (window.chatBoxMainContainerLength += null !== (i = null == s || null === (n = s[0]) || void 0 === n ? void 0 : n.clientHeight) && void 0 !== i ? i : 0, window.lastMessageQRHeight = null !== (a = null == s || null === (o = s[0]) || void 0 === o ? void 0 : o.clientHeight) && void 0 !== a ? a : 0) : window.lastMessageQR = !0, !1 !== (null === (e = window.chat) || void 0 === e || null === (e = e.skin) || void 0 === e ? void 0 : e.scrollToBottomAlways) && setTimeout((function() {
                                (0, p.Lp)()
                            }), 100)
                        })), (!q || q && window.lastMessageQR) && (l.c.setTimestamp(n.or.QR_LOADED), l.c.pushEvent(n.or.QR_LOADED, {
                            payload: {
                                options: null !== (ne = null === (ae = R.quickReplies.options) || void 0 === ae ? void 0 : ae.length) && void 0 !== ne ? ne : 0,
                                avg_characters: Math.floor((null === (oe = R.quickReplies.options) || void 0 === oe ? void 0 : oe.reduce((function(e, t) {
                                    return e + t.title.length
                                }), 0)) / (null !== (se = null === (le = R.quickReplies.options) || void 0 === le ? void 0 : le.length) && void 0 !== se ? se : 1)),
                                multi_select: !!R.quickReplies.multiSelect,
                                inline_qr: !1,
                                hide_input: !!R.hideInput
                            }
                        }))
                    }
                }
            }
        }
    }
]);