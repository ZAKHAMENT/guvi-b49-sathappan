import styles from './UserProgress.module.css'
import { useState } from 'react';
import axios from 'axios';

import {
  Chart as ChartJS,
  LineElement,
  CategoryScale,
  LinearScale,
  PointElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { Line } from 'react-chartjs-2';
import { useEffect } from 'react';

// Register required components with Chart.js
ChartJS.register(
  LineElement,
  CategoryScale,
  LinearScale,
  PointElement,
  Title,
  Tooltip,
  Legend
);

const UserProgress = () => {
  const currentMonth = new Date().getMonth() + 1;
const currentYear = new Date().getFullYear().toString();

const monthNames = [
  "January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

let aa = [...monthNames]; // shallow copy of monthNames
const months = {
  "2025": aa,
};

  const [selecedCalender, setSelectedCalender] = useState({
  });
  const [userActivityDataYearChart, setUserActivityDataYearChart] = useState([]);
  const [userActivityDataMonthChart, setUserActivityDataMonthChart] = useState([]);
  const [userActivityDataStore, setUserActivityDataStore] = useState();// res.data
  const [selectedYear, setSelectedYear] = useState('');
  const [selectedMonth, setSelectedMonth] = useState('');
  let [userYear,setUserYear] = useState(['202521']);
  let [userMonth, setUserMonth] = useState([]);
    let [monthWithValue, setMonthwithValue] = useState([]);
  // X-axis labels
  let labels = [];
  const [yearChart, setYearChart] = useState({ labels: [], data: [] });
const [monthChart, setMonthChart] = useState({ labels: [], data: [] });


  // Chart data
  const data = {
    labels: labels,
    datasets: [
      {
        label: 'My First Dataset',
        data: [],
        fill: false,
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1,
      },
    ],
  };

  // Chart config options
  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Line Chart Example',
      },
    },
  };

    if (selectedMonth === '') {

// update year Chart
  let len = userActivityDataYearChart.length;
for (let i = 0; i < monthNames.length && selectedYear !== ''; i++) {
        if(currentYear !== selecedCalender && monthNames[currentMonth] === labels[i]) break;
                labels.push(monthNames[i]);
  
  for (let j = 0; j < userActivityDataYearChart?.length; j++) {
  if (labels[i] === userActivityDataYearChart[j][0]) {
    data.datasets[0].data.push(userActivityDataYearChart[j][1]);
    len--;
  }
}
    if (len === 0) break;
    data.datasets[0].data.push(0);
}

    } else {
      
// update monthy chart
  let monthChartDataLen = userActivityDataMonthChart.length;

  for (let i = 0; i < monthNames.length; i++) {
        if(currentYear !== selecedCalender && monthNames[currentMonth] === labels[i]) break;
        labels.push(monthNames[i]);
  for (let j = 0; j < userActivityDataMonthChart?.length; j++) {
  if (labels[i] === userActivityDataMonthChart[j][0]) {
    data.datasets[0].data.push(userActivityDataMonthChart[j][1]);
    monthChartDataLen--;
  }
}
    if (monthChartDataLen === 0) break;
    data.datasets[0].data.push(0);
}
    }


  const handleYearChange = (e) => {
    setSelectedYear (e.target.value);
        console.log(selectedYear);
    setYearlyData(e.target.value);
    setSelectedMonth(''); // reset variety when fruit changes  
  };
  const handleMonthChange = (e) => {        
    setSelectedMonth(e.target.value);
    console.log(selectedMonth);
    setMonthlyData(e.target.value);
    labels = []
  };

  const setYearlyData = (year) => {
    for (const month in userActivityDataStore[year]) {
      let currentMonth = [month,0];        
      for (const date in userActivityDataStore[year][month]) {
        currentMonth[1] += userActivityDataStore[year][month][date]
      }
      userActivityDataYearChart.push(currentMonth);
    }
  }
  //
    const setMonthlyData = (month) => {
    for (const date in userActivityDataStore[selectedYear][month]) {
      let currentDate = [date,userActivityDataStore[selectedYear][month][date]];// ['12,/23/2/', 2]
      userActivityDataMonthChart.push(currentDate);
    }
  }

  const getBarChartData = async () => {
    const $FSA_auth_token = localStorage.getItem('$FSA_auth_token');
    try {
    const response = await axios.get('http://localhost:3000/api/user-activity-track', {
          headers: {
            Authorization: `Bearer ${$FSA_auth_token}`,
          },
        });
            // setSelectedCalender(response.data)
            // selectedYear(response.data);
            console.log(response.data);
            setUserActivityDataStore(response.data);

              for (const year in response.data) {
                userYear.push(year);
                for (const month in response.data[year]) {
                  userMonth.push(month)
        //           for (const date in response.data[year][month]) {
        //             userMonth[year][month] += response.data[year][month][date];
        //           }
            }
         }

        // userYear.push('2025')
        // userMonth['2025'] = ['June',11]
        // userMonth = response.data[selectedYear]
        console.log(userYear);
        console.log(userMonth);
        
    } catch (error) {
      console.log('Error fetching barChart:' ,error);
    }

  }
  useEffect(() => {
      getBarChartData();
  },[])
      // let currentDate = new Date().getDate();
      // let currentMonth1 = new Date().getMonth();
      // let currentYear1 = new Date().getFullYear();
      
    console.log(selectedYear,selectedMonth);
    
  return (
    <>
        <div className={styles.row}>
      <div className={styles.dropdownWrapper}>
        <label className={styles.label}>Select Year:</label>
        <select value={selectedYear} onChange={handleYearChange}className={styles.select}>
          <option value="">-- Choose Year --</option>
          {userYear?.map((year,i) => (            
        <option key={i} value={year}>
          {year} 
        </option>
      ))}
          {/* <option value="2025"> 2025</option> */}
        </select>
      </div>

{selectedYear && (
  <div className={styles.dropdownWrapper}>
    <label className={styles.label}>Select Month:</label>
    <select
      value={selectedMonth}
      onChange={handleMonthChange}
      className={styles.select}
    >
      <option value="">-- Choose Month --</option>
      {userMonth?.map((month, idx) => (
        <option key={idx} value={month}>
          {month} 
        </option>
      ))}
    </select>
  </div>
)}

    </div>

   <Line data={data} options={options} />;
       </>
  )
};

export default UserProgress;
