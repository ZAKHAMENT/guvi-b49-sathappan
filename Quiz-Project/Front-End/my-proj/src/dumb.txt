  const { tag, id } = useParams();
  const isValidUrl = `gk/${tag}/${id}`;
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const questionsList = useRef(new DoublyLinkedList());
  const [loading, setLoading] = useState(true);

  const [timer, setTimer] = useState();
  const [selectedOptions, setSelectedOptions] = useState({});
  const [selectedOption, setSelectedOption] = useState(null);
  const [stateProgress, setStateProgress] = useState(0);
  const [progress, setProgress] = useState({ 
    answers: {},
    time: 0,
    currentQuestion: null,
    subProgress: 0,
   });
  const [user, setUser] = useState(null);
useEffect(() => {
  const fetchProfile = async () => {
    try {
      const $FSA_auth_token = localStorage.getItem('$FSA_auth_token');
      if (!$FSA_auth_token) {
        console.warn('Auth token not found');
        return;
      }

      const response = await axios.get('http://localhost:3000/myProfile', {
        headers: {
          Authorization: `Bearer ${$FSA_auth_token}`,
        },
      });
        setUser({
          _id: response.data._id,
        });
    } catch (error) {
      console.error('Error fetching profile data:', error);
    }
  };
  fetchProfile();
  
  // Trigger function for whether user making tab switches or not
  const handleVisibilityChange = () => {
    if (document.visibilityState === "hidden") {
      console.log('Switched');
    } else if (document.visibilityState === "visible") {
      console.log("Tab is active again");
    }
  };

  document.addEventListener("visibilitychange", handleVisibilityChange);
  return () => {
    document.removeEventListener("visibilitychange", handleVisibilityChange);
  };
}, []); // Only run once when the component mounts
// Progress
let total = 12;
const percentage = (stateProgress / total) * 100,
  radius = 50,
  circumference = 2 * Math.PI * radius;
const offset = circumference - (percentage / 100) * circumference;

useEffect(() => {
  const chooseCollection = [];
  for (const key in chooseQuestions) {
    chooseQuestions[key].forEach((curr) => {
      if (!chooseCollection.includes(curr.tag)) {
        chooseCollection.push(curr.tag);
      }
    });
  }

  if (chooseCollection.includes(isValidUrl)) {
    for (const key in chooseQuestions) {
      chooseQuestions[key].forEach((curr) => {
        if (curr.tag === isValidUrl) {
          questionsList.current.insert(curr);
        }
      });
    }

    if (questionsList.current.head) {
      setCurrentQuestion(questionsList.current.head.data);
      setLoading(false);
    } else {
      alert('No questions there');
    }
  } else {
    navigate('/not-found');
  }
}, []); // Narrow dependency array

useEffect(() => {
  if (currentQuestion) {
    setSelectedOption(selectedOptions[currentQuestion.id] || null);
  }
}, [currentQuestion, selectedOptions]);

const handleBlockingPage = () => {
  setShowBlurEffect(false);
  setBlockThePage(false);
  setTimer(120); // Reset timer to 2 minutes
};

// Function to store the timer on the server
const storeTimerToServer = async () => {
  try {
    const userId = user?._id;
    if (!userId) {
      console.warn("User not found, skipping timer save.");
      return;
    }

    await axios.post("http://localhost:3000/api/store-time", {
      userId,
      time: timer,
    });
    // console.log("Timer saved successfully:", timer);
  } catch (error) {
    console.error("Error saving timer:", error);
  }
};

  // Start the timer countdown and periodically save it
  useEffect(() => {
    if (!user) return; // Ensure user exists before starting the timer
      let totalSeconds = timer; // Initialize local timer

    const intervalId = setInterval(() => {
      if (totalSeconds > 0) {
        totalSeconds--; // Decrement the local timer
        setTimer(totalSeconds);
        storeTimerToServer(totalSeconds); // Save timer on every tick
      } else {
        clearInterval(intervalId); // Stop the timer when it reaches 0
      }
    }, 1000);
  
    // Cleanup interval on unmount
    return () => clearInterval(intervalId);
  }, [timer]); // Dependency array only includes `user`
  

let displayMinutes = Math.floor(timer / 60);
let displaySeconds = timer % 60;

useEffect(() => {
  if (user) {
    console.log("User:", user);
  }
}, [user]);

  // Function to save progress to the server
const saveProgressToServer = async () => {
  try {
    const userId = user?._id;
    if (!userId) {
      console.warn("User not found, skipping progress save.");
      return;
    }
    // Store the current user's progress
    progress.time = timer;
    progress.answers = selectedOptions;
    progress.subProgress = stateProgress;
    // Hashing
    const tempTag = `${tag}${id}`;  let hashedCode = 0;
    for (let i = 0; i < tempTag.length; i++) {
      hashedCode += (tempTag.charCodeAt(i));
    }
    //const formattedProgress = { [hashedCode]: progress };

    await axios.post("http://localhost:3000/api/user-temp-progress", { userId, progress, tempTag });
    console.log("Progress saved successfully!");
  } catch (error) {
    console.error("Error saving progress:", error);
  }
};

// Trigger save on page refresh or navigation away
useEffect(() => {
  const handleUnload = (event) => {
    saveProgressToServer();
    // Required to ensure the browser waits for the save operation
    event.preventDefault();
    event.returnValue = ""; // Modern browsers ignore this, but itâ€™s still required for some older ones
  };

  window.addEventListener("beforeunload", handleUnload);
  return () => {
    window.removeEventListener("beforeunload", handleUnload);
  };
}, );
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: String,
  email: String,
  password: String, 
  googleCredential: String,
  registered: { type: Boolean, default: false },
  deviceRegistered: {
    type: Boolean,
    default: false,
  },

  // Progress
  tempProgress: {
    answers: {},
    time: { type: Number, default: 0 },
    currentQuestion: {},
    subProgress: { type: Number, default: 0 },
  },

});

const User = mongoose.model('User', userSchema);
module.exports = User;